name: Auto Test and Deploy

on:
  push:
    branches: [ master, 1.23.X ]
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [ master, 1.23.X ]
    paths-ignore:
      - '*.md'

jobs:
  auto-test:
    needs: [ check-linters ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]  # ARM64 removed
        node: [18, 20]

    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - run: npm install
      - run: npm run build
      - run: npm run test-backend
        env:
          HEADLESS_TEST: 1
          JUST_FOR_TEST: ${{ secrets.JUST_FOR_TEST }}

  check-linters:
    runs-on: ubuntu-latest

    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install
      - run: npm run lint:prod

  e2e-test:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install
      - run: npx playwright install
      - run: npm run build
      - run: npm run test-e2e

  deploy:
    needs: [auto-test, check-linters, e2e-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t uptime-kuma .
          docker tag uptime-kuma:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster tinted-hippopotamus-v4nldd \
            --service Uptime-Kuma-service-bqlsm7dc \
            --force-new-deployment
